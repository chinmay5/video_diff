import os

import torch
from imagen_pytorch import ImagenTrainer

from dataset.cow_mra import TopCowMraDataset


def load_inference_unet_1(configs, device, imagen):
    trainer = ImagenTrainer(
        imagen=imagen,
    ).to(device)
    # If you want to resume training from a checkpoint
    assert os.path.exists(configs.unet_1_checkpoint), "No checkpoint for Unet 1"
    print("Loading Unet base checkpoint from {}".format(configs.unet_1_checkpoint))
    trainer.load(configs.unet_1_checkpoint)
    return trainer, None


def load_inference_unet_2(configs, device, imagen):
    # We perform inference for the second u-net
    # For this, we would load the checkpoint as well as sample from the first checkpoint
    # https://github.com/lucidrains/imagen-pytorch/issues/241
    trainer = ImagenTrainer(imagen=imagen).to(device)
    # If you want to resume training from a checkpoint
    assert os.path.exists(configs.unet_1_checkpoint), "No checkpoint for Unet 1"
    print("Loading Unet base checkpoint from {}".format(configs.unet_1_checkpoint))
    trainer.load(configs.unet_1_checkpoint)
    # We sample from this u-net model to get the conditioning images
    print("Sampling base video from Unet-1")
    with torch.no_grad():
        # Sampling seems to be memory intensive.
        video = trainer.sample(stop_at_unet_number=1, video_frames=configs.num_frames)
        print(f"Generated Unet 1 {video.shape=}")
    assert os.path.exists(configs.unet_2_checkpoint), "No checkpoint for Unet 2"
    print("Loading Unet base checkpoint from {}".format(configs.unet_2_checkpoint))
    trainer.load(configs.unet_2_checkpoint)
    return trainer, video


def load_inference_unet_3(configs, device, imagen):
    trainer, video_unet_1 = load_inference_unet_2(configs, device, imagen)
    print("Sampling from U-net 2")
    with torch.no_grad():
        # We sample from this u-net model to get the conditioning images
        # This also includes the samples generated by unet 1
        video_unet_2 = trainer.sample(stop_at_unet_number=2, video_frames=configs.num_frames,
                                      start_image_or_video=video_unet_1)
        print(f"Generated Unet 2 {video_unet_2.shape=}")
    assert os.path.exists(configs.unet_3_checkpoint), "No checkpoint for Unet 3"
    print("Loading Unet base checkpoint from {}".format(configs.unet_3_checkpoint))
    trainer.load(configs.unet_3_checkpoint)
    return trainer, video_unet_2
